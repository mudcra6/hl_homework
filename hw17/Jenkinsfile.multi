pipeline {
    agent {
        label 'worker-ubuntu'
    }
    stages {
        stage('Build Docker image') {
            steps {
                echo 'Building Docker image...'
                dir("hw17") {
                    script {
                        def imageName = "jenkins_test"
                        def imageTag = "latest"

                        // Build Docker image
                        sh "docker build -t $imageName:$imageTag ."

                        // Check if Docker image build was successful
                        def dockerImage = sh(script: "docker images -q $imageName:$imageTag", returnStdout: true).trim()
                        if (dockerImage) {
                            currentBuild.result = 'SUCCESS'
                            echo "Docker image $imageName:$imageTag built successfully."
                        } else {
                            currentBuild.result = 'FAILURE'
                            error "Failed to build Docker image $imageName:$imageTag."
                        }
                    }
                }
            }
        }
    }
    post {
        success {
            script {
                withCredentials([string(credentialsId: 'github_token', variable: 'githubToken')]) {
                    def repoOwner = "OWNER"
                    def repoName = "REPO"
                    def commitSHA = env.GIT_COMMIT

                    def curlCmd = """
                        curl -L \\
                          -X POST \\
                          -H 'Accept: application/vnd.github+json' \\
                          -H 'Authorization: Bearer ${githubToken}' \\
                          -H 'X-GitHub-Api-Version: 2022-11-28' \\
                          https://api.github.com/repos/${repoOwner}/${repoName}/statuses/${commitSHA} \\
                          -d '{"state":"success","target_url":"https://example.com/build/status","description":"The build succeeded!","context":"continuous-integration/jenkins"}'
                    """

                    sh curlCmd
                }
            }
        }
        failure {
            script {
                withCredentials([string(credentialsId: 'github_token', variable: 'githubToken')]) {
                    def repoOwner = "mudcra6"
                    def repoName = "hl_homework"
                    def commitSHA = env.GIT_COMMIT

                    def curlCmd = """
                        curl -L \\
                          -X POST \\
                          -H 'Accept: application/vnd.github+json' \\
                          -H 'Authorization: Bearer ${githubToken}' \\
                          -H 'X-GitHub-Api-Version: 2022-11-28' \\
                          https://api.github.com/repos/${repoOwner}/${repoName}/statuses/${commitSHA} \\
                          -d '{"state":"failure","target_url":"https://example.com/build/status","description":"The build failed!","context":"continuous-integration/jenkins"}'
                    """
                    sh curlCmd
            }
        }
        failure {
            script {
                def githubToken = "<YOUR-TOKEN>"
                def repoOwner = "OWNER"
                def repoName = "REPO"
                def commitSHA = env.GIT_COMMIT

                def curlCmd = """
                    curl -L \\
                      -X POST \\
                      -H 'Accept: application/vnd.github+json' \\
                      -H 'Authorization: Bearer ${githubToken}' \\
                      -H 'X-GitHub-Api-Version: 2022-11-28' \\
                      https://api.github.com/repos/${repoOwner}/${repoName}/statuses/${commitSHA} \\
                      -d '{"state":"failure","target_url":"https://example.com/build/status","description":"The build failed!","context":"continuous-integration/jenkins"}'
                """

                sh curlCmd
                }
            }
        }
    }
}
